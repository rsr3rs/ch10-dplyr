# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_lost = (arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_lost = (arr_delay - dep_delay))
select(flights, arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost = (arr_delay - dep_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, time_lost, desc())
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, time_lost)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, , desc(time_lost))
?aarrange
?arrange
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- desc(arrange(flights, time_lost))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time_lost))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(time_lost = arr_delay - dep_Delay) %>%
arrange(desc(time_lost))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(time_lost = arr_delay - dep_delay) %>%
arrange(desc(time_lost))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(time_gained = dep_delay - arr_delay) %>%
arrange(desc(time_gained))
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained)
?mean
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(time_gained, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average_gain <- summarize(flights, mean = mean(time_gained, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- select(flights, dest = "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- filter(flights, dest = "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- filter(flights, dest == "SEA")
View(sea_flights)
# On average, did flights to SeaTac gain or loose time?
sea_average_gain <- summarize(sea_flights, mean = mean(time_gained, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(sea_flights, ori == "JFK") %>%
summarize(mean = mean(air_time, na.rm = TRUE), min = min(air_time),
max = max(air_time))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(sea_flights, origin == "JFK") %>%
summarize(mean = mean(air_time, na.rm = TRUE), min = min(air_time),
max = max(air_time))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(sea_flights, origin == "JFK") %>%
summarize(mean = mean(air_time, na.rm = TRUE), min = min(air_time),
na.rm = TRUE, max = max(air_time), na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(sea_flights, origin == "JFK") %>%
summarize(mean = mean(air_time, na.rm = TRUE), min = min(air_time, na.rm = TRUE), max = max(air_time, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- filter(flights, dest == "SEA") %>% select(origin, dest, time_gained)
# On average, did flights to SeaTac gain or loose time?
sea_average_gain <- summarize(sea_flights, mean = mean(time_gained,
na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(sea_flights, origin == "JFK") %>%
summarize(mean = mean(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(mean = mean(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay))
View(dep_delay_by_month)
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
select <- max(dep_delay_by_month, mean_dep_delay)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
select <- max(dep_delay_by_month, mean_dep_delay)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
select <- max(dep_delay_by_month, mean_dep_delay)
# Which month had the greatest average departure delay?
select <- max(dep_delay_by_month$mean_dep_delay)
# Which month had the greatest average departure delay?
max_mean_dep_delay <- max(dep_delay_by_month$mean_dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
select(dep_delay_by_month, month, mean_dep_delay) %>%
plot()
group_by(flights, dest) %>% summarize(mean_arr_delay = mean(arr_delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% head(2)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(mean_arr_delay) %>% head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean_arr_delay) %>% head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean_arr_delay) %>% head(1)
# You can look up these airports in the `airports` data frame!
View(airports)
??flights
arrange(-mean_speed) %>% head()
summarize(mean_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-mean_speed) %>% head()
summarize(mean_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-mean_speed) %>% head()
# Which city was flown to with the highest average speed?
group_by(flights, dest) %>% mutate(flights, speed = distance/time)
# Which city was flown to with the highest average speed?
group_by(flights, dest) %>% mutate(flights, speed = distance/time) %>%
summarize(mean_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-mean_speed) %>% head()
# Which city was flown to with the highest average speed?
group_by(flights, dest) %>% mutate(speed = distance/time) %>%
summarize(mean_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-mean_speed) %>% head()
# Which city was flown to with the highest average speed?
group_by(flights, dest) %>% mutate(speed = distance/time) %>%
summarize(mean_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-mean_speed) %>% head()
